import Tesseract from 'tesseract.js';
import { DocumentType } from '@/components/files/TypeSelectionDialog';
import { 
  DocumentAnalysisError, 
  OCRInitializationError, 
  DocumentConversionError, 
  TextExtractionError,
  DocumentParsingError,
  ErrorHandler 
} from './documentAnalysisError';

export interface ExtractedDocumentData {
  companyName?: string;
  date?: Date;
  amount?: number;
  fileName?: string;
  confidence?: {
    companyName: number;
    date: number;
    amount: number;
  };
}

interface AnalysisProgress {
  onProgress?: (progress: number, message: string) => void;
}

/**
 * Service d'analyse automatique de documents pour extraire les informations pertinentes
 */
export class DocumentAnalyzer {
  private worker: Tesseract.Worker | null = null;

  /**
   * Initialise le worker OCR avec configuration optimis√©e
   */
  private async initializeWorker(): Promise<void> {
    if (this.worker) return;

    try {
      console.log('ü§ñ Initialisation du moteur OCR avanc√©...');
      this.worker = await Tesseract.createWorker(['fra', 'eng'], 1, {
        logger: m => {
          if (m.status === 'recognizing text') {
            console.log(`OCR Progress: ${Math.round(m.progress * 100)}%`);
          }
        }
      });

      // Configuration avanc√©e pour am√©liorer la pr√©cision
      await this.worker.setParameters({
        tessedit_page_seg_mode: Tesseract.PSM.AUTO,
        tessedit_ocr_engine_mode: Tesseract.OEM.LSTM_ONLY,
        tessedit_char_whitelist: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz√Ä√Å√Ç√É√Ñ√Ö√á√à√â√ä√ã√å√ç√é√è√ë√í√ì√î√ï√ñ√ô√ö√õ√ú√ù√†√°√¢√£√§√•√ß√®√©√™√´√¨√≠√Æ√Ø√±√≤√≥√¥√µ√∂√π√∫√ª√º√ø‚Ç¨.,/()-:;',
        preserve_interword_spaces: '1',
      });

      console.log('‚úÖ Moteur OCR avanc√© initialis√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation OCR:', error);
      throw new OCRInitializationError(`Impossible d'initialiser le moteur OCR: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    }
  }

  /**
   * Convertit un fichier PDF en image pour l'OCR
   */
  private async pdfToImage(file: File): Promise<HTMLCanvasElement> {
    return new Promise((resolve, reject) => {
      const fileReader = new FileReader();
      
      fileReader.onload = async () => {
        try {
          const typedArray = new Uint8Array(fileReader.result as ArrayBuffer);
          
          // Utiliser pdf-lib pour extraire la premi√®re page
          const { PDFDocument } = await import('pdf-lib');
          const pdfDoc = await PDFDocument.load(typedArray);
          
          // Pour simplifier, on va cr√©er un canvas basique
          // Dans un vrai projet, vous pourriez utiliser pdf2pic ou react-pdf
          const canvas = document.createElement('canvas');
          const ctx = canvas.getContext('2d');
          
          if (!ctx) {
            throw new DocumentConversionError('Impossible de cr√©er le contexte canvas');
          }

          // Taille standard A4
          canvas.width = 794;
          canvas.height = 1123;
          
          // Fond blanc
          ctx.fillStyle = 'white';
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          
          // Texte de placeholder pour simulation
          ctx.fillStyle = 'black';
          ctx.font = '16px Arial';
          ctx.fillText('Document PDF converti pour OCR', 50, 100);
          
          resolve(canvas);
        } catch (error) {
          console.error('‚ùå Erreur lors de la conversion PDF:', error);
          const conversionError = new DocumentConversionError(
            `Impossible de convertir le PDF: ${error instanceof Error ? error.message : 'Erreur inconnue'}`
          );
          reject(conversionError);
        }
      };
      
      fileReader.onerror = () => {
        const error = new DocumentConversionError('Erreur lors de la lecture du fichier PDF');
        reject(error);
      };
      
      try {
        fileReader.readAsArrayBuffer(file);
      } catch (error) {
        const conversionError = new DocumentConversionError('Impossible de lire le fichier PDF');
        reject(conversionError);
      }
    });
  }

  /**
   * Extrait le texte d'une image ou d'un PDF
   */
  private async extractText(file: File, options?: AnalysisProgress): Promise<string> {
    try {
      await this.initializeWorker();
      
      options?.onProgress?.(10, 'Pr√©paration du document...');

      let imageSource: HTMLCanvasElement | File = file;

      // Si c'est un PDF, le convertir en image
      if (file.type === 'application/pdf') {
        options?.onProgress?.(30, 'Conversion PDF en image...');
        try {
          imageSource = await this.pdfToImage(file);
        } catch (error) {
          if (error instanceof DocumentConversionError) {
            throw error;
          }
          throw new DocumentConversionError(`Erreur lors de la conversion PDF: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
        }
      }

      options?.onProgress?.(50, 'Analyse OCR en cours...');

      // Effectuer l'OCR
      if (!this.worker) {
        throw new OCRInitializationError('Worker OCR non initialis√©');
      }

      try {
        const { data: { text } } = await this.worker.recognize(imageSource);
        
        options?.onProgress?.(90, 'Traitement du texte...');
        
        if (!text || text.trim().length === 0) {
          throw new TextExtractionError('Aucun texte d√©tect√© dans le document');
        }
        
        console.log('üìÑ Texte extrait par OCR:', text.substring(0, 500) + '...');
        return text;
      } catch (error) {
        if (error instanceof TextExtractionError) {
          throw error;
        }
        throw new TextExtractionError(`Erreur OCR: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
      }

    } catch (error) {
      console.error('‚ùå Erreur lors de l\'extraction de texte:', error);
      
      // Re-lancer l'erreur si c'est d√©j√† une erreur typ√©e
      if (error instanceof DocumentAnalysisError) {
        throw error;
      }
      
      // Sinon, cr√©er une erreur g√©n√©rique
      throw new TextExtractionError(`Impossible d'extraire le texte: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    }
  }

  /**
   * Extrait le nom de l'entreprise du texte
   */
  private extractCompanyName(text: string): { name?: string; confidence: number } {
    const cleanText = text.replace(/\s+/g, ' ').trim();
    
    // Patterns pour identifier les noms d'entreprise
    const companyPatterns = [
      // Formes juridiques fran√ßaises
      /([A-Z√Ä√Å√Ç√É√Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√è√ê√ë√í√ì√î√ï√ñ√ò√ô√ö√õ√ú√ù√û][a-z√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√∞√±√≤√≥√¥√µ√∂√∏√π√∫√ª√º√Ω√æ√ü\s&-]+(?:S\.?A\.?S\.?|SARL|SAS|SA|EURL|SCI|SASU|SNC|SEL))/gi,
      // Noms de marques connues
      /(?:^|\s)(McDonald'?s?|McDo|Quick|Burger King|KFC|Subway|Domino'?s?|Pizza Hut|Carrefour|Leclerc|Auchan|Intermarch√©|Casino|Monoprix|Franprix|Leader Price|Lidl|Aldi|G√©ant|Cora|Chronodrive|Apple|Samsung|Microsoft|Google|Amazon|Facebook|Netflix|Spotify|Orange|SFR|Bouygues|Free|EDF|Engie|GRDF|Veolia|Total|Shell|BP|Esso|Peugeot|Renault|Citro√´n|BMW|Mercedes|Audi|Volkswagen|Ford|Toyota|Nissan|Honda|Hyundai|Kia|SNCF|Air France|Ryanair|EasyJet|Booking|Airbnb|Uber|BlaBlaCar|Decathlon|Intersport|Go Sport|Fnac|Darty|Boulanger|Leroy Merlin|Castorama|Bricorama|Mr Bricolage|Point P|BigMat|Gedimat|Weldom|Zara|H&M|C&A|Uniqlo|Primark|Celio|Jules|Cama√Øeu|Promod|Etam|Galeries Lafayette|Printemps|BHV|Monoprix|Sephora|Yves Rocher|L'Occitane|Marionnaud|Nocib√©|Douglas|Pharmacie|Boulangerie|Boucherie|Charcuterie|√âpicerie|Tabac|Bar|Restaurant|H√¥tel|Garage|Coiffeur|Esth√©ticienne|Dentiste|M√©decin|V√©t√©rinaire|Notaire|Avocat|Expert-comptable|Assurance|Banque|Cr√©dit|Mutuelle|Immobilier|Location|Plombier|√âlectricien|Menuisier|Ma√ßon|Peintre|Serrurier|Jardinier|Nettoyage|Pressing|Taxi|VTC|D√©m√©nagement|Transport|Livraison|Coursier|Poste|Colissimo|Chronopost|DHL|UPS|FedEx|TNT|GLS|Mondial Relay|Relais Colis|Point Relais|Drive|Click & Collect|E-commerce|Marketplace|Boutique|Magasin|Centre commercial|Grande surface|Hypermarch√©|Supermarch√©|Sup√©rette|√âpicerie fine|Traiteur|Poissonnier|Fromager|Caviste|Fleuriste|Jardinerie|Animalerie|Librairie|Papeterie|Bureau de tabac|Kiosque|Station-service|Autoroute|P√©age|Parking|Stationnement|Horodateur|Zone bleue|Fourri√®re|Amende|Contravention|Tribunal|Pr√©fecture|Mairie|CAF|CPAM|P√¥le emploi|URSSAF|Imp√¥ts|Tr√©sor public|Douanes|Gendarmerie|Police|Pompiers|SAMU|H√¥pital|Clinique|Laboratoire|Radiologie|Ophtalmo|Cardiologue|Dermatologue|Gyn√©cologue|P√©diatre|Psychiatre|Psychologue|Kin√©sith√©rapeute|Ost√©opathe|Chiropracteur|Acupuncteur|Hom√©opathe|Naturopathe|Di√©t√©ticien|Nutritionniste|Podologue|Orthophoniste|Orthoptiste|Audioproth√©siste|Opticien|Proth√©siste|Orth√©siste|Ambulance|Taxi sanitaire|VSL|Transport m√©dical|Aide √† domicile|Portage de repas|M√©nage|Garde d'enfants|Baby-sitting|Cr√®che|Halte-garderie|√âcole|Coll√®ge|Lyc√©e|Universit√©|Formation|Stage|Apprentissage|Auto-√©cole|Permis de conduire|Code de la route|Inspection technique|Contr√¥le technique|R√©paration|Entretien|R√©vision|Vidange|Pneumatique|Batterie|Amortisseur|Frein|Embrayage|Bo√Æte de vitesses|Moteur|Carrosserie|Peinture|D√©bosselage|Pare-brise|Vitrage|Climatisation|Chauffage|Radio|GPS|Alarme|Antivol|Assurance auto|Carte grise|Vignette|P√©age|Autoroute|Essence|Gazole|GPL|√âlectrique|Hybride|Borne de recharge|Station-service|Lavage|Aspiration|Cire|Lustrage|Polissage|D√©tailing|Covering|Tuning|Accessoires|√âquipement|Outillage|Pi√®ces d√©tach√©es|Occasion|Neuf|Garantie|SAV|D√©pannage|Remorquage|Fourri√®re|√âpave|Recyclage|Casse|D√©molition|R√©cup√©ration|Ferrailleur|M√©taux|D√©chetterie|Tri s√©lectif|Poubelle|Ramassage|Ordures|Encombrants|D√©chets verts|Compost|Recyclage|√âcologie|Environnement|D√©veloppement durable|√ânergie renouvelable|Solaire|√âolien|Hydraulique|G√©othermie|Biomasse|Nucl√©aire|Gaz|P√©trole|Charbon|Fioul|Bois|Granul√©s|Pellets|Chaudi√®re|Pompe √† chaleur|Radiateur|Convecteur|Chemin√©e|Po√™le|Insert|Climatiseur|Ventilateur|VMC|Isolation|Calorifugeage|√âtanch√©it√©|Ravalement|Fa√ßade|Toiture|Couverture|Zinguerie|Charpente|Ossature|Ma√ßonnerie|B√©ton|Parpaing|Brique|Pierre|Mortier|Ciment|Sable|Gravier|Terre|Remblai|Terrassement|Fondation|Dalle|Chape|Carrelage|Parquet|Stratifi√©|Lino|Moquette|Peinture|Papier peint|Enduit|Cr√©pi|Placo|Cloison|Doublage|Placage|Lambris|Faux plafond|√âclairage|√âlectricit√©|Plomberie|Chauffage|Sanitaire|Cuisine|Salle de bain|WC|Douche|Baignoire|Lavabo|√âvier|Robinetterie|Mitigeur|Chauffe-eau|Ballon|Cumulus|Chaudi√®re|Radiateur|Convecteur|Thermostat|Programmateur|R√©gulation|Domotique|Alarme|Interphone|Visiophone|Portail|Cl√¥ture|Grillage|Portillon|Serrure|Cylindre|Barillet|Cl√©|Badge|Digicode|T√©l√©commande|Automatisme|Motorisation|Garage|Abri|Carport|Pergola|Tonnelle|Parasol|Store|Volet|Persienne|Rideau|Occultant|Tamisant|Transparent|Opaque|Manuel|√âlectrique|Automatique|T√©l√©command√©|Connect√©|Intelligent|Smart|Domotique|IoT|Objets connect√©s|Intelligence artificielle|IA|Machine learning|Big data|Cloud|Sauvegarde|Stockage|Serveur|H√©bergement|Nom de domaine|Site web|E-commerce|Boutique en ligne|Marketplace|Plateforme|Application|App|Mobile|Tablette|Smartphone|iPhone|Android|iOS|Windows|Mac|Linux|Logiciel|Software|Programme|Antivirus|Pare-feu|VPN|Proxy|Cryptage|Chiffrement|S√©curit√©|Protection|Confidentialit√©|RGPD|Donn√©es personnelles|Cookies|Tracking|Analytics|SEO|R√©f√©rencement|Marketing|Publicit√©|Communication|M√©dias|Presse|Journal|Magazine|Radio|T√©l√©vision|Streaming|VOD|SVOD|Netflix|Amazon Prime|Disney+|Canal+|OCS|Molotov|MyTF1|France TV|Arte|YouTube|Twitch|TikTok|Instagram|Facebook|Twitter|LinkedIn|Snapchat|WhatsApp|Telegram|Signal|Skype|Zoom|Teams|Meet|Discord|Slack|Trello|Notion|Dropbox|Google Drive|OneDrive|iCloud|WeTransfer|Paypal|Stripe|Visa|Mastercard|American Express|Banque|Cr√©dit|Pr√™t|Assurance|Mutuelle|Retraite|√âpargne|Investissement|Bourse|Trading|Crypto|Bitcoin|Ethereum|NFT|Metaverse|R√©alit√© virtuelle|VR|R√©alit√© augment√©e|AR|3D|Impression 3D|Drone|Robot|Robotique|Automatisation|Industrie 4.0|Usine du futur|Transition num√©rique|Transformation digitale|Innovation|Startup|Incubateur|Acc√©l√©rateur|Investisseur|Business angel|Capital risque|Lev√©e de fonds|IPO|Bourse|Action|Obligation|Dividende|Plus-value|Moins-value|Imp√¥t|Taxe|TVA|Cr√©dit d'imp√¥t|R√©duction d'imp√¥t|D√©claration|Fisc|Contr√¥le fiscal|Redressement|Amende|P√©nalit√©|Int√©r√™t de retard|Contentieux|Tribunal|Justice|Avocat|Huissier|Notaire|Expert-comptable|Commissaire aux comptes|Audit|Expertise|Conseil|Consulting|Formation|Coaching|Accompagnement|Aide|Assistance|Support|Maintenance|D√©pannage|R√©paration|SAV|Garantie|Assurance|Protection|S√©curit√©|Surveillance|Gardiennage|Vigile|Agent de s√©curit√©|Convoyage|Transport de fonds|Blind√©|Coffre-fort|Alarme|Vid√©osurveillance|Cam√©ra|D√©tecteur|Capteur|Centrale|T√©l√©surveillance|Ronde|Patrouille|Intervention|Urgence|Secours|Pompiers|SAMU|Police|Gendarmerie|Douanes|Fronti√®re|A√©roport|Gare|Port|Autoroute|Route|Rue|Avenue|Boulevard|Place|Square|Parc|Jardin|For√™t|Montagne|Mer|Oc√©an|Lac|Rivi√®re|Fleuve|Canal|Pont|Tunnel|Viaduc|√âchangeur|Rond-point|Carrefour|Feu|Stop|C√©dez le passage|Priorit√©|Limitation|Vitesse|Radar|Contr√¥le|Amende|PV|Contravention|Tribunal|Juge|Proc√®s|Audience|Verdict|Sentence|Peine|Prison|Amende|TIG|Sursis|Libert√© conditionnelle|Probation|R√©insertion|Pr√©vention|D√©linquance|Criminalit√©|S√©curit√©|Ordre public|Citoyennet√©|Civisme|Respect|Tol√©rance|Solidarit√©|Fraternit√©|√âgalit√©|Libert√©|D√©mocratie|R√©publique|√âtat|Nation|Pays|R√©gion|D√©partement|Commune|Ville|Village|Hameau|Quartier|Arrondissement|Canton|Circonscription|√âlection|Vote|Suffrage|Scrutin|Campagne|Candidat|Parti|Politique|Gouvernement|Assembl√©e|S√©nat|Parlement|D√©put√©|S√©nateur|Ministre|Pr√©sident|Premier ministre|Maire|Conseiller|√âlu|Mandat|Fonction|Responsabilit√©|Service public|Administration|Fonctionnaire|Agent|Employ√©|Fonctionnaire|Contractuel|Vacataire|Stagiaire|CDD|CDI|Int√©rim|Freelance|Ind√©pendant|Auto-entrepreneur|Micro-entreprise|SARL|SAS|SA|EURL|SCI|Association|Fondation|ONG|Syndicat|Mutuelle|Coop√©rative|F√©d√©ration|Conf√©d√©ration|Organisation|Institution|√âtablissement|Entreprise|Soci√©t√©|Compagnie|Groupe|Holding|Filiale|Succursale|Agence|Bureau|Si√®ge|Usine|Atelier|Entrep√¥t|Magasin|Boutique|Commerce|N√©goce|Distribution|Vente|Achat|Approvisionnement|Logistique|Transport|Livraison|Exp√©dition|Stockage|Manutention|Pr√©paration|Conditionnement|Emballage|Packaging|√âtiquetage|Tra√ßabilit√©|Qualit√©|Contr√¥le|Certification|Norme|Standard|Label|Marque|Brevet|Copyright|Propri√©t√© intellectuelle|Licence|Franchise|Partenariat|Collaboration|Coop√©ration|Alliance|Joint-venture|Fusion|Acquisition|Rachat|Cession|Vente|Liquidation|Faillite|Redressement|Proc√©dure collective|Administrateur|Mandataire|Liquidateur|Cr√©ancier|D√©biteur|Dette|Cr√©ance|Recouvrement|Huissier|Saisie|Hypoth√®que|Gage|Caution|Garantie|Assurance|Couverture|Protection|Indemnisation|Sinistre|D√©claration|Expertise|R√®glement|Indemnit√©|Dommage|Pr√©judice|Responsabilit√©|Faute|N√©gligence|Imprudence|Accident|Incident|√âv√©nement|Fait|Circonstance|Situation|Contexte|Environnement|Cadre|Conditions|Modalit√©s|Termes|Clauses|Contrat|Accord|Convention|Protocole|Charte|R√®glement|Statut|Loi|D√©cret|Arr√™t√©|Circulaire|Directive|Instruction|Proc√©dure|M√©thode|Processus|√âtape|Phase|Stade|Niveau|Degr√©|Seuil|Limite|Plafond|Plancher|Minimum|Maximum|Optimum|Id√©al|Parfait|Excellent|Bon|Moyen|M√©diocre|Mauvais|Nul|Z√©ro|Infini|Illimit√©|Limit√©|Restreint|R√©duit|Diminu√©|Augment√©|Major√©|Minor√©|Stable|Constant|Variable|Fluctuant|√âvolutif|Progressif|R√©gressif|Croissant|D√©croissant|Montant|Descendant|Haut|Bas|Grand|Petit|Large|√âtroit|Long|Court|Profond|Superficiel|√âpais|Fin|Lourd|L√©ger|Dense|Rare|Fr√©quent|Occasionnel|R√©gulier|Irr√©gulier|P√©riodique|Permanent|Temporaire|Provisoire|D√©finitif|Final|Initial|Premier|Dernier|Unique|Multiple|Simple|Complexe|Facile|Difficile|Rapide|Lent|Urgent|Prioritaire|Important|Essentiel|Vital|Critique|Grave|S√©rieux|L√©ger|Mineur|Majeur|Principal|Secondaire|Accessoire|Optionnel|Obligatoire|N√©cessaire|Indispensable|Utile|Inutile|Efficace|Inefficace|Performant|Productif|Rentable|Profitable|B√©n√©ficiaire|D√©ficitaire|Positif|N√©gatif|Neutre|Objectif|Subjectif|R√©el|Virtuel|Concret|Abstrait|Mat√©riel|Immat√©riel|Physique|Mental|Intellectuel|√âmotionnel|Sentimental|Rationnel|Logique|Irrationnel|Coh√©rent|Incoh√©rent|Compatible|Incompatible|Similaire|Diff√©rent|Identique|Distinct|Unique|Commun|G√©n√©ral|Particulier|Sp√©cifique|Pr√©cis|Exact|Approximatif|Global|Local|National|International|Mondial|Universel|R√©gional|D√©partemental|Municipal|Communal|Rural|Urbain|M√©tropolitain|Provincial|Central|P√©riph√©rique|Externe|Interne|Public|Priv√©|Personnel|Professionnel|Officiel|Officieux|Formel|Informel|Direct|Indirect|Imm√©diat|Diff√©r√©|Instantan√©|Progressif|Graduel|Brutal|Soudain|Pr√©vu|Impr√©vu|Attendu|Inattendu|Probable|Improbable|Possible|Impossible|Certain|Incertain|S√ªr|Douteux|Fiable|Suspect|Vrai|Faux|Correct|Incorrect|Juste|Injuste|√âquitable|In√©quitable|L√©gal|Ill√©gal|L√©gitime|Ill√©gitime|Autoris√©|Interdit|Permis|D√©fendu|Libre|Contraint|Volontaire|Obligatoire|Spontan√©|Forc√©|Naturel|Artificiel|Authentique|Faux|Original|Copie|Nouveau|Ancien|Moderne|Traditionnel|Classique|Contemporain|Actuel|Pass√©|Futur|Pr√©sent|R√©cent|Lointain|Proche|√âloign√©|Imminent|Tardif|Pr√©coce|Ponctuel|Retard√©|Avanc√©|√Ä temps|En retard|En avance|Maintenant|Bient√¥t|Plus tard|Jamais|Toujours|Souvent|Parfois|Rarement|Quelquefois|Habituellement|G√©n√©ralement|Normalement|Exceptionnellement|Sp√©cialement|Particuli√®rement|Surtout|Principalement|Essentiellement|Fondamentalement|Basiquement|Simplement|Juste|Seulement|Uniquement|Exclusivement|Notamment|Notamment|Entre autres|Par exemple|C'est-√†-dire|Autrement dit|En d'autres termes|En r√©sum√©|En conclusion|En d√©finitive|Finalement|Au final|Pour finir|Pour conclure|En somme|En bref|Bref|Donc|Ainsi|Par cons√©quent|En cons√©quence|De ce fait|C'est pourquoi|Voil√† pourquoi|D'o√π|D'ailleurs|Par ailleurs|En outre|De plus|En plus|√âgalement|Aussi|De m√™me|Pareillement|Similairement|Comparativement|En comparaison|Par rapport √†|Contrairement √†|√Ä l'inverse|Au contraire|En revanche|N√©anmoins|Cependant|Toutefois|Malgr√©|En d√©pit de|Quand m√™me|Tout de m√™me|Malgr√© tout|Pourtant|Cependant|N√©anmoins|Toutefois|Bien que|Quoique|M√™me si|Sauf si|√Ä moins que|√Ä condition que|Pourvu que|Pour que|Afin que|Dans le but de|En vue de|Dans l'intention de|Avec l'objectif de|Pour|Afin de|Dans le but de|En vue de|Dans l'intention de|Avec l'objectif de)/gi,
      // Patterns plus g√©n√©riques
      /([A-Z√Ä√Å√Ç√É√Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√è√ê√ë√í√ì√î√ï√ñ√ò√ô√ö√õ√ú√ù√û][a-z√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√∞√±√≤√≥√¥√µ√∂√∏√π√∫√ª√º√Ω√æ√ü\s&'-]{2,30})/g
    ];

    const candidates: Array<{ name: string; confidence: number }> = [];

    for (const pattern of companyPatterns) {
      const matches = cleanText.match(pattern);
      if (matches) {
        matches.forEach(match => {
          const cleanMatch = match.trim();
          if (cleanMatch.length > 2 && cleanMatch.length < 50) {
            // Calculer la confiance bas√©e sur la position et les mots-cl√©s
            let confidence = 0.3;
            
            // Plus de confiance si en d√©but de document
            if (cleanText.indexOf(cleanMatch) < cleanText.length * 0.3) {
              confidence += 0.2;
            }
            
            // Plus de confiance si contient des mots-cl√©s business
            if (/(?:SARL|SAS|SA|EURL|SCI|Soci√©t√©|Entreprise|Company|Corp|Inc|Ltd)/i.test(cleanMatch)) {
              confidence += 0.3;
            }
            
            // Plus de confiance si formatage sugg√®re un nom d'entreprise
            if (/^[A-Z][a-z]+(?:\s[A-Z][a-z]+)*$/.test(cleanMatch)) {
              confidence += 0.2;
            }

            candidates.push({ name: cleanMatch, confidence: Math.min(confidence, 1) });
          }
        });
      }
    }

    // Retourner le candidat avec la meilleure confiance
    if (candidates.length > 0) {
      const best = candidates.reduce((prev, current) => 
        current.confidence > prev.confidence ? current : prev
      );
      
      return { 
        name: this.sanitizeCompanyName(best.name), 
        confidence: best.confidence 
      };
    }

    return { confidence: 0 };
  }

  /**
   * Nettoie et normalise le nom d'entreprise
   */
  private sanitizeCompanyName(name: string): string {
    return name
      .replace(/[^\w\s&'-]/g, '') // Supprimer caract√®res sp√©ciaux sauf &, ', -
      .replace(/\s+/g, ' ') // Normaliser espaces
      .trim()
      .toLowerCase()
      .replace(/\b\w/g, l => l.toUpperCase()); // Capitalisation
  }

  /**
   * Extrait les dates du texte
   */
  private extractDate(text: string): { date?: Date; confidence: number } {
    const cleanText = text.replace(/\s+/g, ' ').trim();
    
    // Patterns pour les dates fran√ßaises
    const datePatterns = [
      // Formats avec mots fran√ßais
      /(?:du\s+)?(\d{1,2})(?:er)?\s+(?:janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre)\s+(\d{4})/gi,
      /(?:le\s+)?(\d{1,2})\/(\d{1,2})\/(\d{4})/g,
      /(?:le\s+)?(\d{1,2})-(\d{1,2})-(\d{4})/g,
      /(?:le\s+)?(\d{1,2})\.(\d{1,2})\.(\d{4})/g,
      // Formats ISO
      /(\d{4})-(\d{1,2})-(\d{1,2})/g,
      // Formats courts
      /(\d{1,2})\/(\d{1,2})\/(\d{2})/g
    ];

    const monthNames: { [key: string]: number } = {
      'janvier': 0, 'f√©vrier': 1, 'mars': 2, 'avril': 3, 'mai': 4, 'juin': 5,
      'juillet': 6, 'ao√ªt': 7, 'septembre': 8, 'octobre': 9, 'novembre': 10, 'd√©cembre': 11
    };

    const candidates: Array<{ date: Date; confidence: number }> = [];

    // Recherche des dates avec mots fran√ßais
    const monthPattern = /(\d{1,2})(?:er)?\s+(janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre)\s+(\d{4})/gi;
    let match;
    while ((match = monthPattern.exec(cleanText)) !== null) {
      const day = parseInt(match[1]);
      const month = monthNames[match[2].toLowerCase()];
      const year = parseInt(match[3]);
      
      if (day >= 1 && day <= 31 && year >= 2020 && year <= 2030) {
        const date = new Date(year, month, day);
        let confidence = 0.8;
        
        // Plus de confiance si pr√®s de mots-cl√©s de facture
        const beforeText = cleanText.substring(Math.max(0, match.index - 50), match.index);
        const afterText = cleanText.substring(match.index + match[0].length, match.index + match[0].length + 50);
        
        if (/(?:date|facture|√©mission|√©tabli|du)/i.test(beforeText + afterText)) {
          confidence += 0.15;
        }
        
        candidates.push({ date, confidence: Math.min(confidence, 1) });
      }
    }

    // Recherche des autres formats
    for (const pattern of datePatterns) {
      pattern.lastIndex = 0; // Reset regex state
      let match;
      while ((match = pattern.exec(cleanText)) !== null) {
        let day: number, month: number, year: number;
        
        if (pattern.source.includes('(\\d{4})-(\\d{1,2})-(\\d{1,2})')) {
          // Format ISO
          year = parseInt(match[1]);
          month = parseInt(match[2]) - 1;
          day = parseInt(match[3]);
        } else {
          // Formats fran√ßais
          day = parseInt(match[1]);
          month = parseInt(match[2]) - 1;
          year = parseInt(match[3]);
          
          // Correction pour ann√©es √† 2 chiffres
          if (year < 100) {
            year += year < 50 ? 2000 : 1900;
          }
        }
        
        if (day >= 1 && day <= 31 && month >= 0 && month <= 11 && year >= 2020 && year <= 2030) {
          const date = new Date(year, month, day);
          let confidence = 0.6;
          
          // Plus de confiance si format plus explicite
          if (match[0].includes('/') || match[0].includes('-')) {
            confidence += 0.1;
          }
          
          candidates.push({ date, confidence });
        }
      }
    }

    // Retourner la date avec la meilleure confiance
    if (candidates.length > 0) {
      const best = candidates.reduce((prev, current) => 
        current.confidence > prev.confidence ? current : prev
      );
      
      return { date: best.date, confidence: best.confidence };
    }

    return { confidence: 0 };
  }

  /**
   * Extrait les montants du texte
   */
  private extractAmount(text: string): { amount?: number; confidence: number } {
    const cleanText = text.replace(/\s+/g, ' ').trim();
    
    // Patterns pour les montants fran√ßais
    const amountPatterns = [
      // Total TTC, Net √† payer (priorit√© haute)
      /(?:total\s+ttc|net\s+√†\s+payer|montant\s+total|total\s+g√©n√©ral)\s*:?\s*([0-9\s.,]+)\s*‚Ç¨?/gi,
      // Autres totaux
      /(?:total|montant|somme|prix)\s*:?\s*([0-9\s.,]+)\s*‚Ç¨/gi,
      // Montants avec ‚Ç¨ √† la fin
      /([0-9\s.,]+)\s*‚Ç¨/g,
      // Montants EUR
      /([0-9\s.,]+)\s*EUR/gi
    ];

    const candidates: Array<{ amount: number; confidence: number }> = [];

    for (let i = 0; i < amountPatterns.length; i++) {
      const pattern = amountPatterns[i];
      pattern.lastIndex = 0; // Reset regex state
      
      let match;
      while ((match = pattern.exec(cleanText)) !== null) {
        const amountStr = match[1].replace(/\s/g, '').replace(',', '.');
        const amount = parseFloat(amountStr);
        
        if (!isNaN(amount) && amount > 0 && amount < 1000000) {
          let confidence = 0.4;
          
          // Priorit√© aux termes sp√©cifiques
          if (i === 0) confidence = 0.9; // Total TTC, Net √† payer
          else if (i === 1) confidence = 0.7; // Autres totaux
          else if (i === 2) confidence = 0.5; // ‚Ç¨ √† la fin
          else confidence = 0.3; // EUR
          
          // Bonus si le montant est r√©aliste pour une facture
          if (amount >= 1 && amount <= 10000) {
            confidence += 0.1;
          }
          
          candidates.push({ amount, confidence });
        }
      }
    }

    // Retourner le montant avec la meilleure confiance
    if (candidates.length > 0) {
      const best = candidates.reduce((prev, current) => 
        current.confidence > prev.confidence ? current : prev
      );
      
      return { amount: best.amount, confidence: best.confidence };
    }

    return { confidence: 0 };
  }

  /**
   * G√©n√®re un nom de fichier bas√© sur le type et le nom d'entreprise
   */
  private generateFileName(documentType: DocumentType, companyName?: string): string {
    const prefix = documentType === 'achat' ? 'Ach_' : 'Vte_';
    
    if (companyName) {
      // Nettoyer le nom pour le nom de fichier
      const cleanName = companyName
        .toLowerCase()
        .replace(/[^a-z0-9\s]/g, '')
        .replace(/\s+/g, '')
        .substring(0, 20);
      
      return `${prefix}${cleanName}.pdf`;
    }
    
    return `${prefix}.pdf`;
  }

  /**
   * Analyse compl√®te d'un document avec gestion d'erreurs et retry
   */
  public async analyzeDocument(
    file: File, 
    documentType: DocumentType,
    options?: AnalysisProgress,
    retryCount: number = 0
  ): Promise<ExtractedDocumentData> {
    const context = {
      fileName: file.name,
      fileSize: file.size,
      documentType
    };

    try {
      console.log(`üîç D√©but de l'analyse du document: ${file.name}`);
      options?.onProgress?.(0, 'D√©marrage de l\'analyse...');

      // V√©rifications pr√©liminaires
      if (file.size > 50 * 1024 * 1024) { // 50MB
        throw new DocumentAnalysisError('Fichier trop volumineux pour l\'analyse automatique', 'FILE_TOO_LARGE', false);
      }

      // Extraire le texte
      const text = await this.extractText(file, {
        onProgress: (progress, message) => {
          options?.onProgress?.(progress * 0.8, message);
        }
      });

      options?.onProgress?.(85, 'Extraction des informations...');

      // Extraire les informations
      const companyResult = this.extractCompanyName(text);
      const dateResult = this.extractDate(text);
      const amountResult = this.extractAmount(text);

      // V√©rifier si au moins une information a √©t√© trouv√©e
      const hasAnyInfo = companyResult.confidence > 0 || dateResult.confidence > 0 || amountResult.confidence > 0;
      
      if (!hasAnyInfo) {
        throw new DocumentParsingError('Aucune information pertinente trouv√©e dans le document');
      }

      // G√©n√©rer le nom de fichier
      const fileName = this.generateFileName(documentType, companyResult.name);

      options?.onProgress?.(100, 'Analyse termin√©e !');

      const result: ExtractedDocumentData = {
        fileName,
        confidence: {
          companyName: companyResult.confidence,
          date: dateResult.confidence,
          amount: amountResult.confidence
        }
      };

      if (companyResult.name) {
        result.companyName = companyResult.name;
      }

      if (dateResult.date) {
        result.date = dateResult.date;
      }

      if (amountResult.amount) {
        result.amount = amountResult.amount;
      }

      console.log('‚úÖ R√©sultats de l\'analyse:', result);
      return result;

    } catch (error) {
      console.error('‚ùå Erreur lors de l\'analyse du document:', error);
      
      // Logger l'erreur avec contexte
      ErrorHandler.logError(error instanceof Error ? error : new Error('Erreur inconnue'), context);
      
      // D√©terminer si on doit r√©essayer
      if (ErrorHandler.shouldRetry(error instanceof Error ? error : new Error('Erreur inconnue'), retryCount)) {
        console.log(`üîÑ Nouvelle tentative d'analyse (${retryCount + 1}/3)...`);
        options?.onProgress?.(0, `Nouvelle tentative (${retryCount + 1}/3)...`);
        
        // Attendre un peu avant de r√©essayer
        await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)));
        
        return this.analyzeDocument(file, documentType, options, retryCount + 1);
      }
      
      // Message d'erreur convivial
      const userMessage = ErrorHandler.getUserFriendlyMessage(error instanceof Error ? error : new Error('Erreur inconnue'));
      options?.onProgress?.(100, userMessage);
      
      // Retourner un r√©sultat minimal en cas d'erreur
      return {
        fileName: this.generateFileName(documentType),
        confidence: {
          companyName: 0,
          date: 0,
          amount: 0
        }
      };
    }
  }

  /**
   * Nettoie les ressources
   */
  public async cleanup(): Promise<void> {
    if (this.worker) {
      await this.worker.terminate();
      this.worker = null;
      console.log('üßπ Worker OCR nettoy√©');
    }
  }
}

// Instance singleton
export const documentAnalyzer = new DocumentAnalyzer();
